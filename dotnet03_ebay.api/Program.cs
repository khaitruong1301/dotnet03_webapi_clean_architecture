using System.Security.Claims;
using System.Text;
using dotnet03_ebay.Infrastructure.Models;
using EbayProject.Api.Helpers;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);


// service EF
var connectionString = builder.Configuration.GetConnectionString("connectionStringEbay");
builder.Services.AddDbContext<EbayContext>(options =>
    options.UseSqlServer(connectionString));


//DI Repository 
builder.Services.AddScoped<IBidRepository, BidRepository>();
builder.Services.AddScoped<ICategoryRepository, CategoryRepository>();
builder.Services.AddScoped<IClientRepository, ClientRepository>();
builder.Services.AddScoped<IConnectionCountLogRepository, ConnectionCountLogRepository>();
builder.Services.AddScoped<IEbayProductRepository, EbayProductRepository>();
builder.Services.AddScoped<IGetListOrderDetailByOrderIdRepository, GetListOrderDetailByOrderIdRepository>();
builder.Services.AddScoped<IGroupRepository, GroupRepository>();
builder.Services.AddScoped<IListingRepository, ListingRepository>();
builder.Services.AddScoped<ILoginLogRepository, LoginLogRepository>();
builder.Services.AddScoped<INhanVienRepository, NhanVienRepository>();
builder.Services.AddScoped<IOrderRepository, OrderRepository>();
builder.Services.AddScoped<IOrderDetailRepository, OrderDetailRepository>();
builder.Services.AddScoped<IOrderby2024Repository, Orderby2024Repository>();
builder.Services.AddScoped<IOrderby2025Repository, Orderby2025Repository>();
builder.Services.AddScoped<IOrdersBy2025Repository, OrdersBy2025Repository>();
builder.Services.AddScoped<IPhongBanRepository, PhongBanRepository>();
builder.Services.AddScoped<IProductRepository, ProductRepository>();
builder.Services.AddScoped<IProductImageRepository, ProductImageRepository>();
builder.Services.AddScoped<IProductListCategoryRepository, ProductListCategoryRepository>();
builder.Services.AddScoped<IRatingRepository, RatingRepository>();
builder.Services.AddScoped<IRefreshTokenRepository, RefreshTokenRepository>();
builder.Services.AddScoped<IRoleRepository, RoleRepository>();
builder.Services.AddScoped<IRoleGroupRepository, RoleGroupRepository>();
builder.Services.AddScoped<IUserRepository, UserRepository>();
builder.Services.AddScoped<IUserGroupRepository, UserGroupRepository>();
builder.Services.AddScoped<IUserRoleRepository, UserRoleRepository>();
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();

//DI Service
builder.Services.AddScoped<IUserService, UserService>();


//S·ª≠ d·ª•ng map controller 
builder.Services.AddControllers();
//Swagger c·∫•u h√¨nh c√≥ ƒëi·ªÅn Authentication
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1", new OpenApiInfo { Title = "Ebay API", Version = "v1" });

    // üî• Th√™m h·ªó tr·ª£ Authorization header t·∫•t c·∫£ api
    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.Http,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "Nh·∫≠p token v√†o √¥ b√™n d∆∞·ªõi theo ƒë·ªãnh d·∫°ng: Bearer {token}"
    });

    // üî• ƒê·ªãnh nghƒ©a y√™u c·∫ßu s·ª≠ d·ª•ng Authorization tr√™n t·ª´ng api
    options.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});


//Add service cors
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAllOrigins", builder =>
    {
        builder.WithOrigins("http://localhost:5016","http://localhost:5254")
               .AllowAnyMethod()
               .AllowAnyHeader()
               .AllowCredentials();
    });
});

//C√†i ƒë·∫∑t Jwt Bearer Authentication
//Th√™m middleware authentication
var privateKey = builder.Configuration["jwt:Serect-Key"];
var Issuer = builder.Configuration["jwt:Issuer"];
var Audience = builder.Configuration["jwt:Audience"];
// Th√™m d·ªãch v·ª• Authentication v√†o ·ª©ng d·ª•ng, s·ª≠ d·ª•ng JWT Bearer l√†m ph∆∞∆°ng th·ª©c x√°c th·ª±c
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme).AddJwtBearer(options =>
{
    // Thi·∫øt l·∫≠p c√°c tham s·ªë x√°c th·ª±c token
    options.TokenValidationParameters = new TokenValidationParameters()
    {
        // Ki·ªÉm tra v√† x√°c nh·∫≠n Issuer (ngu·ªìn ph√°t h√†nh token)
        ValidateIssuer = true,
        ValidIssuer = Issuer, // Bi·∫øn `Issuer` ch·ª©a gi√° tr·ªã c·ªßa Issuer h·ª£p l·ªá
                              // Ki·ªÉm tra v√† x√°c nh·∫≠n Audience (ƒë·ªëi t∆∞·ª£ng nh·∫≠n token)
        ValidateAudience = true,
        ValidAudience = Audience, // Bi·∫øn `Audience` ch·ª©a gi√° tr·ªã c·ªßa Audience h·ª£p l·ªá
                                  // Ki·ªÉm tra v√† x√°c nh·∫≠n kh√≥a b√≠ m·∫≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ k√Ω token
        ValidateIssuerSigningKey = true,
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(privateKey)),
        // S·ª≠ d·ª•ng kh√≥a b√≠ m·∫≠t (`privateKey`) ƒë·ªÉ t·∫°o SymmetricSecurityKey nh·∫±m x√°c th·ª±c ch·ªØ k√Ω c·ªßa token
        // Gi·∫£m ƒë·ªô tr·ªÖ (skew time) c·ªßa token xu·ªëng 0, ƒë·∫£m b·∫£o token h·∫øt h·∫°n ch√≠nh x√°c
        ClockSkew = TimeSpan.Zero,
        // X√°c ƒë·ªãnh claim ch·ª©a vai tr√≤ c·ªßa user (ƒë·ªÉ ph√¢n quy·ªÅn)
        RoleClaimType = ClaimTypes.Role,
        // X√°c ƒë·ªãnh claim ch·ª©a t√™n c·ªßa user
        NameClaimType = ClaimTypes.Name,
        // Ki·ªÉm tra th·ªùi gian h·∫øt h·∫°n c·ªßa token, kh√¥ng cho ph√©p s·ª≠ d·ª•ng token h·∫øt h·∫°n
        ValidateLifetime = true
    };
});


//Khai b√°o jwt auth service
builder.Services.AddScoped<JwtAuthService>();




var app = builder.Build();
app.UseHttpsRedirection();
app.UseCors("AllowAllOrigins");

//s·ª≠ d·ª•ng middleware authentication
app.UseAuthentication();
app.UseAuthorization();



//use middle ware controller
app.MapControllers();
//use swagger
app.UseSwagger();
app.UseSwaggerUI();

app.Run();
